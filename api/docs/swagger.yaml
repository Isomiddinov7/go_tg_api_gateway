definitions:
  coins_service.BuyOrSellRequest:
    properties:
      coin_amount:
        type: string
      coin_id:
        type: string
      user_id:
        type: string
    type: object
  coins_service.BuyOrSellResponse:
    properties:
      admin_address:
        type: string
      amount_price:
        type: string
      coin_amount:
        type: string
    type: object
  coins_service.Coin:
    properties:
      address:
        type: string
      card_number:
        type: string
      coin_buy_price:
        type: string
      coin_icon:
        type: string
      coin_sell_price:
        type: string
      created_at:
        type: string
      halfcoins:
        items:
          $ref: '#/definitions/coins_service.HalfCoinPrice'
        type: array
      id:
        type: string
      imageId:
        type: string
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  coins_service.CoinNFT:
    properties:
      created_at:
        type: string
      id:
        type: string
      nft_address:
        type: string
      nft_img:
        type: string
      nft_name:
        type: string
      nft_price:
        type: string
      updated_at:
        type: string
    type: object
  coins_service.CoinNFTUpdate:
    properties:
      id:
        type: string
      nft_address:
        type: string
      nft_img:
        type: string
      nft_name:
        type: string
      nft_price:
        type: string
    type: object
  coins_service.CreateTelegramPremiumPrice:
    properties:
      month:
        type: string
      premium_id:
        type: string
      price:
        type: string
    type: object
  coins_service.GetListCoinNFTResponse:
    properties:
      coin_nfts:
        items:
          $ref: '#/definitions/coins_service.CoinNFT'
        type: array
      count:
        type: integer
    type: object
  coins_service.GetListCoinResponse:
    properties:
      coins:
        items:
          $ref: '#/definitions/coins_service.Coin'
        type: array
      count:
        type: integer
    type: object
  coins_service.GetListNFTResponse:
    properties:
      count:
        type: integer
      nfts:
        items:
          $ref: '#/definitions/coins_service.NFT'
        type: array
    type: object
  coins_service.GetPremiumListResponse:
    properties:
      count:
        type: integer
      telegram_premium:
        items:
          $ref: '#/definitions/coins_service.TelegramPremium'
        type: array
    type: object
  coins_service.GetPremiumTransaction:
    properties:
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      month:
        type: string
      name:
        type: string
      phone_number:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_name:
        type: string
    type: object
  coins_service.GetPremiumTransactionId:
    properties:
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      month:
        type: string
      name:
        type: string
      payment_img:
        type: string
      phone_number:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      user_name:
        type: string
    type: object
  coins_service.GetPremiumTransactionResponse:
    properties:
      count:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/coins_service.GetPremiumTransaction'
        type: array
    type: object
  coins_service.HalfCoinPrice:
    properties:
      halfCoinAmount:
        type: string
      halfCoinPrice:
        type: string
    type: object
  coins_service.HistoriesUser:
    properties:
      address:
        type: string
      all_price:
        type: string
      card_name:
        type: string
      card_number:
        type: string
      coin_amount:
        type: string
      coin_id:
        type: string
      coin_price:
        type: string
      confirm_img:
        type: string
      date_time:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      transaction_status:
        type: string
      user_id:
        type: string
    type: object
  coins_service.HistoryMessageResponse:
    properties:
      history_with_status:
        items:
          $ref: '#/definitions/coins_service.HistoryUserWithStatus'
        type: array
    type: object
  coins_service.HistoryUserResponse:
    properties:
      count:
        type: integer
      histories:
        items:
          $ref: '#/definitions/coins_service.HistoriesUser'
        type: array
    type: object
  coins_service.HistoryUserWithStatus:
    properties:
      history_status:
        $ref: '#/definitions/coins_service.TransactionStatus'
      history_user:
        $ref: '#/definitions/coins_service.HistoriesUser'
    type: object
  coins_service.NFT:
    properties:
      card_namber:
        type: string
      card_number_name:
        type: string
      comment:
        type: string
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      nft_coin_img:
        type: string
      nft_img:
        type: string
      status:
        type: string
      telegram_id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      user_name:
        type: string
    type: object
  coins_service.TelegramPremium:
    properties:
      Price:
        items:
          $ref: '#/definitions/coins_service.TelegramPremiumPrice'
        type: array
      card_number:
        type: string
      created_at:
        type: string
      id:
        type: string
      img:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  coins_service.TelegramPremiumPrice:
    properties:
      id:
        type: string
      month:
        type: string
      price:
        type: string
    type: object
  coins_service.TransactionStatus:
    properties:
      message:
        type: string
      status:
        type: string
      text:
        type: string
    type: object
  coins_service.UpdateCoin:
    properties:
      address:
        type: string
      card_number:
        type: string
      coin_buy_price:
        type: string
      coin_icon:
        type: string
      coin_sell_price:
        type: string
      halfcoins:
        items:
          $ref: '#/definitions/coins_service.HalfCoinPrice'
        type: array
      id:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  coins_service.UpdateNFT:
    properties:
      id:
        type: string
      status:
        type: string
    type: object
  coins_service.UpdateStatus:
    properties:
      transaction_id:
        type: string
      transaction_status:
        type: string
    type: object
  http.Response:
    properties:
      data: {}
      description:
        type: string
      status:
        type: string
    type: object
  users_service.AdminResponse:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      message:
        items:
          $ref: '#/definitions/users_service.AdminResponseMessage'
        type: array
      user_id:
        type: string
    type: object
  users_service.AdminResponseMessage:
    properties:
      created_at:
        type: string
      file:
        type: string
      last_message:
        type: string
      read:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  users_service.CreateUser:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      telegram_id:
        type: string
      username:
        type: string
    type: object
  users_service.GetListUserBuyTransactionResponse:
    properties:
      count:
        type: integer
      user_transaction:
        items:
          $ref: '#/definitions/users_service.UserBuyTransaction'
        type: array
    type: object
  users_service.GetListUserResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/users_service.User'
        type: array
    type: object
  users_service.GetListUserSellTransactionResponse:
    properties:
      count:
        type: integer
      user_transaction:
        items:
          $ref: '#/definitions/users_service.UserSellTransaction'
        type: array
    type: object
  users_service.GetMessageAdminResponse:
    properties:
      admin_message:
        items:
          $ref: '#/definitions/users_service.AdminResponse'
        type: array
      message_count:
        type: integer
    type: object
  users_service.GetMessageUserResponse:
    properties:
      count:
        type: integer
      messages:
        items:
          $ref: '#/definitions/users_service.Message'
        type: array
    type: object
  users_service.GetTransactionSuccessImgResponse:
    properties:
      comment:
        type: string
      success_img:
        type: string
    type: object
  users_service.HistoryUserTransaction:
    properties:
      buy:
        items:
          $ref: '#/definitions/users_service.UserTransactionBuy'
        type: array
      first_name:
        type: string
      last_name:
        type: string
      sell:
        items:
          $ref: '#/definitions/users_service.UserTransactionSell'
        type: array
      user_id:
        type: string
      username:
        type: string
    type: object
  users_service.Message:
    properties:
      created_at:
        type: string
      file:
        type: string
      id:
        type: string
      read:
        type: string
      status:
        type: string
      text:
        type: string
      user_id:
        type: string
    type: object
  users_service.Paymsq:
    properties:
      created_at:
        type: string
      file:
        type: string
      id:
        type: string
      message:
        type: string
      premium_transaction_id:
        type: string
      updated_at:
        type: string
      user_transaction_id:
        type: string
    type: object
  users_service.PaymsqResponse:
    properties:
      message:
        items:
          $ref: '#/definitions/users_service.Paymsq'
        type: array
    type: object
  users_service.Req:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  users_service.UpdateMessageRequest:
    properties:
      id:
        type: string
      read:
        type: string
    type: object
  users_service.UpdateTransaction:
    properties:
      id:
        type: string
      transaction_status:
        type: string
    type: object
  users_service.UpdateUser:
    properties:
      id:
        type: string
      status:
        type: string
      warning_count:
        type: string
    type: object
  users_service.User:
    properties:
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      status:
        type: string
      telegram_id:
        type: string
      updated_at:
        type: string
      user_status:
        $ref: '#/definitions/users_service.UserStatus'
      username:
        type: string
    type: object
  users_service.UserBuyTransaction:
    properties:
      CheckImg:
        type: string
      all_price:
        type: string
      coin:
        type: string
      coin_amount:
        type: string
      coin_img:
        type: string
      coin_price:
        type: string
      created_at:
        type: string
      id:
        type: string
      message:
        type: string
      status:
        type: string
      transaction_status:
        type: string
      user:
        type: string
      user_address:
        type: string
    type: object
  users_service.UserSellTransaction:
    properties:
      CheckImg:
        type: string
      all_price:
        type: string
      card_holder_name:
        type: string
      card_number:
        type: string
      coin_amount:
        type: string
      coin_id:
        type: string
      coin_img:
        type: string
      coin_price:
        type: string
      created_at:
        type: string
      id:
        type: string
      message:
        type: string
      status:
        type: string
      transaction_status:
        type: string
      user_id:
        type: string
    type: object
  users_service.UserStatus:
    properties:
      status:
        type: string
      warning_count:
        type: string
    type: object
  users_service.UserTransactionBuy:
    properties:
      CheckImg:
        type: string
      all_price:
        type: string
      coin_amount:
        type: string
      coin_id:
        type: string
      coin_img:
        type: string
      coin_name:
        type: string
      coin_price:
        type: string
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      message:
        type: string
      status:
        type: string
      telegram_id:
        type: string
      transaction_status:
        type: string
      updated_at:
        type: string
      user_address:
        type: string
      user_id:
        type: string
      user_name:
        type: string
    type: object
  users_service.UserTransactionSell:
    properties:
      CheckImg:
        type: string
      all_price:
        type: string
      card_holder_name:
        type: string
      card_number:
        type: string
      coin_amount:
        type: string
      coin_id:
        type: string
      coin_img:
        type: string
      coin_name:
        type: string
      coin_price:
        type: string
      created_at:
        type: string
      first_name:
        type: string
      id:
        type: string
      message:
        type: string
      status:
        type: string
      telegram_id:
        type: string
      transaction_status:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      user_name:
        type: string
    type: object
info:
  contact: {}
paths:
  /admin/message:
    post:
      consumes:
      - multipart/form-data
      description: Create Message
      operationId: create_admin_message
      parameters:
      - description: Upload file
        in: formData
        name: file
        type: file
      - description: TEXT
        in: formData
        name: text
        required: true
        type: string
      - description: UserId
        in: formData
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCoinBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Message
      tags:
      - Admin
  /admin/message/:
    get:
      consumes:
      - application/json
      description: Get Admin Message  By ID
      operationId: get_admin_all_message_by_id
      produces:
      - application/json
      responses:
        "200":
          description: UserMessageBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetMessageAdminResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Admin Message  By ID
      tags:
      - Admin Message
  /admin/message/{id}:
    get:
      consumes:
      - application/json
      description: Get Admin Message  By ID
      operationId: get_admin_message_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserMessageBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetMessageUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Admin Message  By ID
      tags:
      - Admin Message
  /admin/message/user/{id}:
    get:
      consumes:
      - application/json
      description: Get Admin Message  By ID
      operationId: get_message_admin_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserMessageBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetMessageUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Admin Message  By ID
      tags:
      - Admin Message
  /buy:
    post:
      consumes:
      - application/json
      description: Get Buy
      operationId: get_buy
      parameters:
      - description: BuyOrSellRequest
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.BuyOrSellRequest'
      produces:
      - application/json
      responses:
        "200":
          description: SellBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.BuyOrSellResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Buy
      tags:
      - Buy
  /coin:
    get:
      consumes:
      - application/json
      description: Get Coins List
      operationId: get_coin_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetAllCoinResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.GetListCoinResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Coins List
      tags:
      - Coin
    post:
      consumes:
      - multipart/form-data
      description: Create Coin
      operationId: create_coin
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: Coin Name
        in: formData
        name: name
        required: true
        type: string
      - description: Coin Buy Price
        in: formData
        name: coin_buy_price
        required: true
        type: string
      - description: Coin Sell Price
        in: formData
        name: coin_sell_price
        required: true
        type: string
      - description: Address
        in: formData
        name: address
        required: true
        type: string
      - description: Card Number
        in: formData
        name: card_number
        required: true
        type: string
      - description: Status
        in: formData
        name: status
        required: true
        type: string
      - description: coins_service.CreateCoin.HalfCoinPrice
        in: formData
        name: halfcoins
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: GetCoinBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.Coin'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Coin
      tags:
      - Coin
  /coin/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Coin
      operationId: delete_coin
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Coin data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete Coin
      tags:
      - Coin
    get:
      consumes:
      - application/json
      description: Get Coin  By ID
      operationId: get_coin_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CoinBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.Coin'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Coin  By ID
      tags:
      - Coin
  /coin/nft:
    get:
      consumes:
      - application/json
      description: Get CoinNFT List
      operationId: get_coin_nft_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetListCoinNFTResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.GetListCoinNFTResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get CoinNFT List
      tags:
      - CoinNFT
    post:
      consumes:
      - multipart/form-data
      description: Create CoinNFT
      operationId: create_coin_nft
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: CoinNFT Name
        in: formData
        name: nft_name
        required: true
        type: string
      - description: CoinNFT  Price
        in: formData
        name: coin_nft_price
        required: true
        type: string
      - description: NFTAddress
        in: formData
        name: nft_address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCoinNFTBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.CoinNFT'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create CoinNFT
      tags:
      - CoinNFT
  /coin/nft/{id}:
    delete:
      consumes:
      - application/json
      description: Delete CoinNFT
      operationId: delete_coin_nft
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CoinNFT data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete CoinNFT
      tags:
      - CoinNFT
    get:
      consumes:
      - application/json
      description: Get CoinNFT  By ID
      operationId: get_coin_nft_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CoinNFTBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.CoinNFT'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Coin  By ID
      tags:
      - CoinNFT
    put:
      consumes:
      - application/json
      description: Update CoinNFt
      operationId: update_coin_nft
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateCoinNFT
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.CoinNFTUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: CoinNFT data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.CoinNFT'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update CoinNFT
      tags:
      - CoinNFT
  /coin/update:
    put:
      consumes:
      - multipart/form-data
      description: Update Coin
      operationId: update_coin
      parameters:
      - description: id
        in: formData
        name: id
        required: true
        type: string
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: Coin Name
        in: formData
        name: name
        required: true
        type: string
      - description: Coin Buy Price
        in: formData
        name: coin_buy_price
        required: true
        type: string
      - description: Coin Sell Price
        in: formData
        name: coin_sell_price
        required: true
        type: string
      - description: Address
        in: formData
        name: address
        required: true
        type: string
      - description: Card Number
        in: formData
        name: card_number
        required: true
        type: string
      - description: Status
        in: formData
        name: status
        required: true
        type: string
      - description: UpdateCoin
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.UpdateCoin'
      - description: coins_service.CreateCoin.HalfCoinPrice
        in: formData
        name: halfcoins
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Coin data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.Coin'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update Coin
      tags:
      - Coin
  /history:
    get:
      consumes:
      - application/json
      description: Get History Users List
      produces:
      - application/json
      responses:
        "200":
          description: GetHistoryUserResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.HistoryUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get History Users List
      tags:
      - History
  /history/message:
    get:
      consumes:
      - application/json
      description: Get HistoryMessage Users List
      parameters:
      - description: id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: HistoryMessageResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.HistoryMessageResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get HistoryMessage Users List
      tags:
      - HistoryMessage
    put:
      consumes:
      - application/json
      description: HistoryMessage Users
      parameters:
      - description: id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: HistoryMessageResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: UpdateHistoryRead Users
      tags:
      - UpdateHistoryRead
  /history/user:
    get:
      consumes:
      - application/json
      description: Get History Users List
      operationId: get_history_user_list
      parameters:
      - description: id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetHistoryUserResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.HistoryUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get History Users List
      tags:
      - History
  /login:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: LoginRequestBody
        in: body
        name: object
        required: true
        schema:
          $ref: '#/definitions/users_service.Req'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: login
      tags:
      - Admin
  /message/{id}:
    put:
      consumes:
      - application/json
      description: Update Message
      operationId: update_message
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateMessage
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/users_service.UpdateMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Message data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update Message
      tags:
      - Message
  /nft:
    get:
      consumes:
      - application/json
      description: Get NFTs List
      operationId: get_nft_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: GetListNFTResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.GetListNFTResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get NFTs List
      tags:
      - NFT
    post:
      consumes:
      - multipart/form-data
      description: Create NFT
      operationId: create_nft
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: NFT Comment
        in: formData
        name: comment
        required: true
        type: string
      - description: User ID NFT
        in: formData
        name: user_id
        required: true
        type: string
      - description: Telegram ID
        in: formData
        name: telegram_id
        required: true
        type: string
      - description: Coin NFT ID
        in: formData
        name: coin_nft_id
        required: true
        type: string
      - description: Card number
        in: formData
        name: card_number
        required: true
        type: string
      - description: Card number Name
        in: formData
        name: card_number_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCoinBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.NFT'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create NFT
      tags:
      - NFT
  /nft/{id}:
    delete:
      consumes:
      - application/json
      description: Delete NFT
      operationId: delete_nft
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: NFT data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Delete NFT
      tags:
      - NFT
    get:
      consumes:
      - application/json
      description: Get NFT  By ID
      operationId: get_nft_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: NFTBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.NFT'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get NFT  By ID
      tags:
      - NFT
    put:
      consumes:
      - application/json
      description: Update NFT
      operationId: update_nft
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateNFT
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.UpdateNFT'
      produces:
      - application/json
      responses:
        "200":
          description: NFT data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.NFT'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update NFT
      tags:
      - NFT
  /premium:
    get:
      consumes:
      - application/json
      description: Get Premium Transaction List
      operationId: get_premium_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: GetPremiumListResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.GetPremiumListResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Premium Transaction List
      tags:
      - Premium
  /premium/{id}:
    get:
      consumes:
      - application/json
      description: Get Premium  By ID
      operationId: get_premium_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: TelegramPremiumBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.TelegramPremium'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Premium  By ID
      tags:
      - Premium
    put:
      consumes:
      - application/json
      description: Update Premium
      operationId: update_status
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateStatusCoin
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.UpdateStatus'
      produces:
      - application/json
      responses:
        "200":
          description: TelegramPremium data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.TelegramPremium'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update Premium
      tags:
      - Premium
  /premium/create:
    post:
      consumes:
      - multipart/form-data
      description: Create Premium
      operationId: create_premium
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: Premium Name
        in: formData
        name: name
        required: true
        type: string
      - description: Card Number
        in: formData
        name: card_number
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetTelegramPremiumBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.TelegramPremium'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Premium
      tags:
      - Premium
  /premium/price:
    post:
      consumes:
      - application/json
      description: Create Price
      operationId: create_premium_price
      parameters:
      - description: CreateTelegramPremiumPriceBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.CreateTelegramPremiumPrice'
      produces:
      - application/json
      responses:
        "200":
          description: GetTelegramPremiumPriceBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.TelegramPremiumPrice'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Price
      tags:
      - Premium
  /premium/transaction:
    get:
      consumes:
      - application/json
      description: Get Premium Transaction List
      operationId: get_premium_transaction_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: GetPremiumTransactionResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.GetPremiumTransactionResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Premium Transaction List
      tags:
      - Premium
    post:
      consumes:
      - multipart/form-data
      description: Create Premium Transaction
      operationId: create_premium_transaction
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: Phone number
        in: formData
        name: phone_number
        required: true
        type: string
      - description: Telegram Username
        in: formData
        name: telegram_username
        required: true
        type: string
      - description: Price ID
        in: formData
        name: price_id
        required: true
        type: string
      - description: User ID
        in: formData
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetTelegramPremiumBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.TelegramPremium'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Premium Transaction
      tags:
      - Premium
  /premium/transaction/{id}:
    get:
      consumes:
      - application/json
      description: Get PremiumTransaction  By ID
      operationId: get_premium_transaction_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetPremiumTransactionIdBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.GetPremiumTransactionId'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get PremiumTransaction  By ID
      tags:
      - Premium
  /sell:
    post:
      consumes:
      - application/json
      description: Get Sell
      operationId: get_sell
      parameters:
      - description: BuyOrSellRequest
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/coins_service.BuyOrSellRequest'
      produces:
      - application/json
      responses:
        "200":
          description: SellBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/coins_service.BuyOrSellResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Sell
      tags:
      - Sell
  /send-message:
    post:
      consumes:
      - multipart/form-data
      description: POST Telegram Message
      operationId: post_message
      parameters:
      - description: Upload file
        in: formData
        name: file
        type: file
      - description: User Id
        in: formData
        name: user_id
        required: true
        type: string
      - description: Message
        in: formData
        name: message
        required: true
        type: string
      - description: Status
        in: formData
        name: status
        type: string
      - description: user_transaction_id
        in: formData
        name: user_transaction_id
        type: string
      - description: premium_transaction_id
        in: formData
        name: premium_transaction_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: TelegramMessageResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: POST Telegram Message
      tags:
      - Telegram Message
  /send-message/{id}:
    get:
      consumes:
      - multipart/form-data
      description: POST Telegram Message
      operationId: get_message_telegram_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: TelegramMessageResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.PaymsqResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: POST Telegram Message
      tags:
      - Telegram Message
  /success-img/{id}:
    get:
      consumes:
      - application/json
      description: Get Transaction Success Img By Id
      operationId: get_transaction_success_img
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetTransactionSuccessImgResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetTransactionSuccessImgResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Transaction Success Img By Id
      tags:
      - User Transfer Success Img
  /transaction/{id}:
    put:
      consumes:
      - application/json
      description: TransactionUpdate
      operationId: transaction_update
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateTransactionBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/users_service.UpdateTransaction'
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: TransactionUpdate
      tags:
      - User
  /user:
    get:
      consumes:
      - application/json
      description: Get Users List
      operationId: get_user_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetAllUserResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetListUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Users List
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create User
      operationId: create_user
      parameters:
      - description: CreateUserBody
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/users_service.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: GetUserBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.User'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create User
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get User  By ID
      operationId: get_user_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.User'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User  By ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User
      operationId: update_user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: UpdateUser
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/users_service.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.User'
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Update User
      tags:
      - User
  /user/all-transfer/{id}:
    get:
      consumes:
      - application/json
      description: Get User History Transaction User  By ID
      operationId: get_user_history_transaction_user_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: HistoryUserTransactionBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.HistoryUserTransaction'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User History Transaction User  By ID
      tags:
      - User Transfer
  /user/buy:
    get:
      consumes:
      - application/json
      description: Get Transactions List
      operationId: get_transaction_by_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetAllCoinResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetListUserBuyTransactionResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Transactions List
      tags:
      - User
    post:
      consumes:
      - multipart/form-data
      description: UserBuy
      operationId: User_buy
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: User ID
        in: formData
        name: userId
        required: true
        type: string
      - description: Coin ID
        in: formData
        name: coinId
        required: true
        type: string
      - description: Address
        in: formData
        name: address
        required: true
        type: string
      - description: CoinAmount
        in: formData
        name: coin_amount
        required: true
        type: string
      - description: Message
        in: formData
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetUserBuyBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: UserBuy
      tags:
      - User
  /user/buy/{id}:
    get:
      consumes:
      - application/json
      description: Get User Buy  By ID
      operationId: get_user_buy_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserTransactionBuyBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.UserTransactionBuy'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User Buy  By ID
      tags:
      - User Buy
  /user/message:
    post:
      consumes:
      - multipart/form-data
      description: Create Message
      operationId: create_user_message
      parameters:
      - description: Upload file
        in: formData
        name: file
        type: file
      - description: TEXT
        in: formData
        name: text
        required: true
        type: string
      - description: UserId
        in: formData
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetCoinBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Create Message
      tags:
      - User
  /user/message/{id}:
    get:
      consumes:
      - application/json
      description: Get User Message  By ID
      operationId: get_user_message_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: UserMessageBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetMessageUserResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User Message  By ID
      tags:
      - User Message
  /user/sell:
    get:
      consumes:
      - application/json
      description: Get Transactions List
      operationId: get_transaction_sell_list
      parameters:
      - description: offset
        in: query
        name: offset
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      - description: search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetAllCoinResponseBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.GetListUserSellTransactionResponse'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Transactions List
      tags:
      - User
    post:
      consumes:
      - multipart/form-data
      description: UserSell
      operationId: User_sell
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      - description: User ID
        in: formData
        name: userId
        required: true
        type: string
      - description: Coin ID
        in: formData
        name: coinId
        required: true
        type: string
      - description: CoinAmount
        in: formData
        name: coin_amount
        required: true
        type: string
      - description: Message
        in: formData
        name: message
        required: true
        type: string
      - description: Card Number
        in: formData
        name: card_number
        required: true
        type: string
      - description: Card Holder Name
        in: formData
        name: card_holder_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: GetUserSellBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: UserSell
      tags:
      - User
  /user/sell/{id}:
    get:
      consumes:
      - application/json
      description: Get User Sell  By ID
      operationId: get_user_sell_by_id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CoinBody
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/users_service.UserTransactionSell'
              type: object
        "400":
          description: Invalid Argument
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Server Error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  type: string
              type: object
      summary: Get User Sell  By ID
      tags:
      - User Sell
swagger: "2.0"
